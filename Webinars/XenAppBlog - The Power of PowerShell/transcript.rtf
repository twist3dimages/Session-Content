{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\vieww13420\viewh27380\viewkind1
\deftab720
\pard\pardeftab720\ri-7

\f0\b\fs28 \cf0 XenAppExpo - The Power of PowerShell
\f1\b0\fs24 \
\pard\pardeftab720\li200\ri-7

\f0\fs26 \cf0 Intro
\f1\fs24 \
\pard\pardeftab720\li400\ri-7

\f0 \cf0 #Slide - The Power of PowerShell\
#Slide - PS> whoami\
#Slide - Automating Software Installs\
\pard\pardeftab720\li600\ri-7
\cf0 First off, let's talk about exactly what we're going to be doing in this session. The title is the Power of PowerShell but since PowerShell touches so many aspects of technology we need to hone in on exactly how we'll be applying PowerShell today.\
\
This session is going to be about using PowerShell as a software deployment tool. It will be about how to simply take a software package, deliver it to a set of clients and then get it installed with as little planning as possible. I'll go over how I created a script to deliver and install software packages as well as my PowerShell module that I built awhile back to make the effort of figuring out all the nuances that go on with multiple software products.\
\
This talk is a trimmed down version of a 3-hour session I did at the TechMentor 2015 conference in Redmond a couple months ago. If anyone is interested in the topic feel free download all of that content that\'92s up on my Github repo which I\'92ll share with you near the end of the session.\
\
\pard\pardeftab720\li400\ri-7
\cf0 #Slide - Well, There's Your Problem\
\pard\pardeftab720\li600\ri-7
\cf0 Have you ever deployed more than just a couple pieces of software? If so, you probably know where I'm going to be coming from here. I was a SCCM admin for 5 years at my previous place of employment. I probably deployed more than 5-6 dozen different types of applications. Every deployment was the same; figure out how to make it install silently, figure out how to get all the post-install configurations done and finally, figure out how to detect everything you just did to give a pass or failure.\
\
Typically, this wouldn't be a problem but you'll find that nearly every piece of software was packaged just a little bit differently. I'd try the /q switch to see if that worked. If not, I'd try /s. Well, maybe it was an InstallShield installer so I had to create a silent ISS file. Whatever the case, after doing this a few dozen times I finally got fed up and created my own PowerShell module to take all the guesswork out.\
\
Finally, when the install did happen, sometimes it wouldn't show up in Programs and Features or it needed so much post-install configuration. There were registry keys that had to be placed somewhere, files that needed to be copied after the install, etc. Some apps are messy like that. They don't have a good way to just apply whatever the user wants.\
This is the problem I sought to solve with the module I'm about to show you.\
\
\pard\pardeftab720\li400\ri-7
\cf0 #Slide - Why Use PowerShell?\
\pard\pardeftab720\li600\ri-7
\cf0 So why use PowerShell to do this anyway?  That's a good question. Well, first of all, I know PowerShell very well. It's my hammer and everything looks like a nail to me.  \
\
In all seriousness, the PowerShell module that will be doing the majority of the work was originally designed to be delivered with SCCM. I used SCCM as the deployment tool and then used PowerShell as the method to execute the installer, change the registry, move files around, whatever. There's no way to do that natively with SCCM. So that's reason #1.  It's free.\
\
Next, PowerShell is flexible. If you write a solution yourself you have ultimate control over how it behaves. The only limitation you have is your time and knowledge. When it comes to PowerShell and it's integration with the .NET framework you can do just about anything you'd like with it. It's extremely flexible in what you can do.\
\
..and finally, it's fun!  I'm a big automation nerd like I'm sure a lot of you are. I love writing scripts to speed up a bunch of mundane tasks or to simply code something up that I don't have to remember again. In this instance, I decided to make an Install-Software function instead of worrying about all the switches to use.\
\
\pard\pardeftab720\li400\ri-7
\cf0 #Slide - Demo Workflow\
\pard\pardeftab720\li600\ri-7
\cf0 Before we get started with the demo I need to give you a little tutorial on the demo is going to go down.\
\
I\'92m going to be deploying the Nagios agent to a few machines and doing that requires a few distinct steps.\
\
In a nutshell, the demo is going to consist of 5 main steps;\
\
\pard\pardeftab720\li960\fi-360\ri-7
\ls1\ilvl0\cf0 1.	Taking input of all the configuration items I\'92ll be using like what clients to deploy to, the location of the package folder I\'92ll be deploying and a few other things. Using the launch script,we'll point our deployments at a few machines using a parameter.\
\pard\pardeftab720\li960\ri-7
\cf0 \
\pard\pardeftab720\li960\fi-360\ri-7
\ls2\ilvl0\cf0 2.	Next, the launch script will test connectivity of each client one at a time. We'll first ping the machine to see if it's online. If so, we'll check for SMB connectivity ensuring the c$ share is available and finally check for WinRM connectivity since that's how I'll be kicking off all the install.\
\pard\pardeftab720\ri-7
\cf0 \
\pard\pardeftab720\li960\fi-360\ri-7
\ls3\ilvl0\cf0 3.	Next, the launch script is going to copy the PSM1 file down to the client so it can import locally rather than dealing with any network issues.\
\pard\pardeftab720\ri-7
\cf0 \
\pard\pardeftab720\li960\fi-360\ri-7
\ls4\ilvl0\cf0 4.	Next, I'll kick off the software installer using WinRM from my launch script to get the software installed.\
\pard\pardeftab720\ri-7
\cf0 \
\pard\pardeftab720\li960\fi-360\ri-7
\ls5\ilvl0\cf0 5.	..and finally, it'll clean up after itself by removing the deployment folder it creates that includes the software package itself and the PSM1 file.\
\pard\pardeftab720\ri-7
\cf0 \
\pard\pardeftab720\li600\ri-7
\cf0 \'85and I should also mention that all of this will happen in parallel using jobs.\
}